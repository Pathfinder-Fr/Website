using System;
using System.Diagnostics;
using GalleryServerPro.ErrorHandler.CustomExceptions;

namespace GalleryServerPro.Business
{
	/// <summary>
	/// Contains functionality for interacting with FFmpeg, the open source utility. Specifically, Gallery Server Pro uses it to generate
	/// thumbnail images for video and to extract metadata about video and audio files. See http://www.ffmpeg.org for more information.
	/// </summary>
	public static class FFmpeg
	{
		/// <summary>
		/// Generates a thumbnail image for the video at the specified <paramref name="mediaFilePath"/> and returns the output from the
		/// execution of the FFmpeg utility. The thumbnail is created at the same width and height as the original video and saved to
		/// <paramref name="thumbnailFilePath"/>. The <paramref name="galleryId"/> is used during error handling to associate the error,
		/// if any, with the gallery. Requires the application to be running at Full Trust. Returns <see cref="String.Empty"/> when the
		/// application is running at less than Full Trust or when the FFmpeg utility is not present in the bin directory.
		/// </summary>
		/// <param name="mediaFilePath">The full file path to the source video file. Example: D:\media\video\myvideo.flv</param>
		/// <param name="thumbnailFilePath">The full file path to store the thumbnail image to. If a file with this name is already present,
		/// it is overwritten.</param>
		/// <param name="videoThumbnailPosition">The position, in seconds, in the video where the thumbnail is generated from a frame.
		/// If the video is shorter than the number of seconds specified here, no thumbnail is created.</param>
		/// <param name="galleryId">The gallery ID.</param>
		/// <returns>
		/// Returns the text output from the execution of the FFmpeg utility. This data can be parsed to learn more about the media file.
		/// </returns>
		public static string GenerateThumbnail(string mediaFilePath, string thumbnailFilePath, int videoThumbnailPosition, int galleryId)
		{
			string ffmpegOutput = String.Empty;

			if ((AppSetting.Instance.AppTrustLevel != ApplicationTrustLevel.Full) || (String.IsNullOrEmpty(AppSetting.Instance.FFmpegPath)))
			{
				return ffmpegOutput;
			}

			// Call FFmpeg, which will generate the file at the specified location

			TimeSpan timeSpan = new TimeSpan(0, 0, videoThumbnailPosition);
			string videoThumbnailPositionStr = String.Format("{0:00}:{1:00}:{2:00}", (int)timeSpan.TotalHours, timeSpan.Minutes, timeSpan.Seconds);

			// The -ss parameter must be a string in this format: HH:mm:ss. Ex: "00:00:03" for 3 seconds
			string args = string.Format(@"-ss {0} -i ""{1}"" -an -an -r 1 -vframes 1 -y ""{2}""", videoThumbnailPositionStr, mediaFilePath, thumbnailFilePath);

			return ExecuteFFmpeg(args, galleryId);
		}

		/// <summary>
		/// Returns the output from the execution of the FFmpeg utility against the media file stored at <paramref name="mediaFilePath" />.
		/// This data can be parsed for useful information such as duration, width, height, and bit rates. The utility does not alter
		/// the file. The <paramref name="galleryId" /> is used during error handling to associate the error,
		/// if any, with the gallery. Requires the application to be running at Full Trust. Returns <see cref="String.Empty" /> when the 
		/// application is running at less than Full Trust or when the FFmpeg utility is not present.
		/// </summary>
		/// <param name="mediaFilePath">The full file path to the source video file. Example: D:\media\video\myvideo.flv</param>
		/// <param name="galleryId">The gallery ID.</param>
		/// <returns>Returns the text output from the execution of the FFmpeg utility. This data can be parsed to learn more about the media file.</returns>
		public static string GetOutput(string mediaFilePath, int galleryId)
		{
			string ffmpegOutput = String.Empty;

			if ((AppSetting.Instance.AppTrustLevel != ApplicationTrustLevel.Full) || (String.IsNullOrEmpty(AppSetting.Instance.FFmpegPath)))
			{
				return ffmpegOutput;
			}

			string args = string.Format(@"-i ""{0}""", mediaFilePath);

			return ExecuteFFmpeg(args, galleryId);
		}

		/// <summary>
		/// Execute the FFmpeg utility with the given <paramref name="arguments" /> and return the text output generated by it.
		/// See http://www.ffmpeg.org for documentation.
		/// </summary>
		/// <param name="arguments">The argument values to pass to the FFmpeg utility. 
		/// Example: -ss 00:00:03 -i "D:\media\video\myvideo.flv" -an -vframes 1 -y "D:\media\video\zThumb_myvideo.jpg"</param>
		/// <param name="galleryId">The gallery ID.</param>
		/// <returns>Returns the text output from the execution of the FFmpeg utility. This data can be parsed to learn more about the media file.</returns>
		private static string ExecuteFFmpeg(string arguments, int galleryId)
		{
			const int timeoutmS = 3000; // Number of milliseconds before process times out.
			string ffmpegOutput = String.Empty;

			ProcessStartInfo info = new ProcessStartInfo(AppSetting.Instance.FFmpegPath, arguments);
			info.UseShellExecute = false;
			info.CreateNoWindow = true;
			info.RedirectStandardError = true;
			info.RedirectStandardOutput = true;

			using (Process p = new Process())
			{
				try
				{
					p.StartInfo = info;
					p.Start();
					bool processCompletedSuccessfully = p.WaitForExit(timeoutmS);

					// Read the output from FFmpeg into a variable.
					ffmpegOutput = p.StandardError.ReadToEnd();

					p.Close();

					if (!processCompletedSuccessfully)
					{
						throw new BusinessException(string.Format("FFmpeg timed out while creating a video thumbnail. In most cases the thumbnail image is still created and you can ignore this message. If thumbnail images are not being created, report it at www.galleryserverpro.com, along with a link to the video if possible. The timeout value is set to {0} milliseconds.", timeoutmS));
					}
				}
				catch (Exception ex)
				{
					ErrorHandler.Error.Record(ex, galleryId, Factory.LoadGallerySettings(), AppSetting.Instance);
				}
			}

			return ffmpegOutput;
		}
	}
}
